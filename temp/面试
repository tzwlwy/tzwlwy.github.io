自我介绍
你好，我的名字是王焱，毕业于浙江工业大学之江学院，专业是软件工程。  我擅长自动化。在上一家 我主要完成过平台交易及中台的测试。平台交易方面，在常规的测试之上搭建了一键造单工具。造单工具是通过接口直接的串联，通过状态来判断订单走到哪一步的一个接口自动化的应用。中台方面，其实就是接口的单元测试及集成测试。单元测试方面，用的是python的unittest框架，集成测试方面，是github上的一个框架理解并结合自己的框架模式进行改造，主要采用的思维是object-model的形式


你有什么优点和缺点？
我感觉有一点既是优点也是缺点吧，缺点是懒，不喜欢重复性工作，优点是 我会使用技术改变这个现状，特别是指定既是能帮我改变这个现状时
我会有很强的驱动性。

在同一个项目组内，你认为你怎么做会比另外一名测试更加优秀？
我之前刚参加工作时，有很多一起进来的同事，当初我感觉他们很多都比我优秀，例如细心，思维方式等
但是现在看来，我已经走在他们前面很远了，所以我认为两点很重要：一个是要不断向他人看齐，学习他人的优点，第二点是技术方面，要多看多学，多了解市面上的主流技术，有能力的话与之工作结合起来，一方面 可以进行实践，另一方面可以提高效率，并提升自己竞争力


你为什么离开上家公司？离职原因（这个会在最后问）
主要还是薪资问题吧，因为公司没有完善的涨薪体制，就去年而言，整个研发部没有一个人涨薪的，这就导致大锅饭一碗端，认真做事比较受伤，会降低我的劳动积极性，我担心温水煮青蛙，不利于我自身发展


2 测试理论基础题
这类题目就是考测试工程师的基本能力了，比如测试计划，测试流程，如何bug，你做过哪些测试，一般我们认为这些能力做的再好都是应该的，不会有加分，但是只要做的不好，那就是个不合格的测试工程师了。这种题目也不会问的太多，大概题目如下：



请描述下你上个公司的测试流程？
一般是产品先建一个任务，把需求文档存放上去，并通知相应人员进行查看。之后会进行需求评审，由产品对需求文档进行详尽分析，期间开发 测试 ，必要时间还会通知业务进行评审，
评审无问题后，开发开始开发排期，开发文档的编写，测试开始测试排期，编写测试用例。在测试用例完善之后，进行一轮测试用例的评审。 之后就是 开发完成开发并自测之后 进行提测，测试发邮件
通知运维搭建测试环境（有需要的话），然后测试进行测试，测试通过之后通知运维搭建beta环境（有需要的话），然后在beta在进行一轮回归，没有问题之后通知产品验收，产品验收后通知业务进行验收，然后搭建线上环境 并发邮件通知上线时间。上完线后由业务进行线上简单验证，确保没有问题

请描述下bug的几个要素？
编号
git分支（版本）
账号密码 地址
操作顺序
截图等
优先级

白盒和黑盒的区别，你是怎么运用的？
白盒跟黑盒其实验证的原理都是一样的
都是看逻辑判断是否与需求一致
唯一不同的是白盒你可以查看他的内部逻辑，自我进行判断
而黑盒则不可以关注，仅只能设计测试用例来进行判断，相对白盒是差一点，但是只要用例设计的完善，其实结果都是一样的


你是如何做测试分析？
其实我感觉最主要是观察需求。了解需求，了解需求的数据来源，数据输出，需求功能点，再考虑性能，兼容性，安全性。任务的上线时间点，
需求功能点的优先级以及开发排期，再根据开发排期进行测试排期，如果时间不足，需要考虑增加人员 或者减少部分需求 甚至是 延长上线时间

如何设计测试用例？什么样子的测试用例是好用例？
其实需求理解清楚了，再了解输入输出及功能点，按照边界值，等价类，流程图等方法进行设计用例即可

功能测试在 beta 版本对外的上线标准是什么？
貌似业界对beta的定义不太统一，有人说这个是A/B测试的一种， 但一般认为专业测试人员完成后，有部分用户参与的一轮测试即beta测试。一般测试环境为用户实际应用环境，目标在于要求用户使用发现不合理，不符合实际情况的问题，然后改进。
功能上线标准每个公司不一样，大致如下：
1.所有功能点(需求)都被用例覆盖到了

2.所有用例执行过至少一遍

3.所有发现的bug被修复并验证，做过regression了。

4.不能修复的记录了/关闭了/known issue了。

5.bug曲线区域平稳了


3 测试管理题

如果项目周期很短，测试人力匮乏，你是怎么协调的？

范围不变，赶工/增加人手，快速跟进/并行开始任务。 范围能变，砍低优先级用例，缩小测试范围。



描述下你团队的测试分工
我们目前是按照系统进行分工的，在项目紧急时，在安排其他人员进行协助



对于团队成员，你是如何打kpi的？
我们是根据线上bug及测试环境bug进行对比，当然如果线上出现严重bug，那kpi就很低了。然后以及项目评价及项目完成效率


4移动测试相关
如今是移动互联网的天下，谁家没有个应用，所以这一块基本都会问到，同时也会看你的简历，如果你没有做过，基本也不会问的太深，如果你是专门做这一块的，那么要好好准备了。



概念题

描述下web测试和移动应用测试的相同点和区别？
0.任何类型测试先定性，再定量， 范围， 分类一定，大差不差。

1.web通常不要安装，移动应用通常要安装。

2.移动设备存在特殊性，不同设备的屏幕/分辨率，系统，定制UI都不相同。

3.移动应用不应该影响移动设备现有功能，如电话/短信等。

4.移动端要重点关注，发热（电量消耗）， crash， 流量(4G/WIFI/2G)等



你是如何做应用的兼容性测试的？
一般兼容性主要关注：

1.硬件的适配：不同手机厂商、硬件性能，不同屏幕大小的适配

2.OS版本的兼容。 iOS，Android， 手机，pad， 版本号啊，MUI定制啊等

3.不同分辨率屏幕的适配

解决办法（云测，此处欠我广告费），除公司自备主流设备外，需参考：
1.各大厂商发布的季度/年度手机出货量，尽量覆盖出货量大的，热门的机型

2.应用做tracking，记录自己用户常用机型

3.购买各种云测服务，解决机型适配问题



请讲出客户端下 3 个常用的性能指标的名称与具体含义？

基本的：

1.CPU利用率

2.内存使用率

3.平均用户响应时间


独有的：

1.电量

2.流量

3.首次打开速度

4.竞品相应项目质量比较



iOS应用和Android应用测试有什么侧重点？
主要是iOS系统和Android系统的本质造成的：

1.Android运行基于虚拟机，iOS则是沙盒机制

2.iOS是伪后台，任何第三方程序都不能在后台运行；而Android是真后台，安卓中任何程序都能在后台运行，直到内存不够才关闭

3.IOS中用于UI指令权限最高，安卓中数据处理指令权限最高。

测试实际应用上来，个人觉得没有本质区别，要注意以下问题：

1.安全性。 因为Android2的本质，任何程序都就可以轻松访问其他程序文件，要关注下有没有偷偷访问不需要功能/偷流量/常时间运行占用内存消耗电量等问题。

2.Android开源，定制版本过多（比如小米系列MIUI）， 要关注定制引起的问题。
请讲诉移动应用的灰度是怎么做的？
灰度发布作为A/B Test的一种，一般指发布新功能到部分用户，收集反馈/改进，进而发布到全步用户的一种策略。

个人经历过以下方面：
1.新服务发布到全部服务器，但通过配置项把不同特征用户的请求打到不同的后端服务上去。比如ip是中国的用户访点击某个按钮，调用的是后端。。。/vi这个API， 而国外ip调用。。/V2

2.新功能的后端服务只发布到部分服务器，只有访问到这个服务器的用户才能用新功能。

3.同一个用户访问的平台不同，请求的服务就不同，比如app的访问V1， web的访问V2，可以通过发布app版本来实现。

另外这个实现还有很多专业的AB测试平台可以实现， 例如（云测，此处欠我广告费）。

如果涉及到写DB操作， 一般都双写。即访问新服务时，写到新服务的DB数据也要写到老服务的DB。甚至全部切换至新服务后再并行运行一段时间，才彻底切换到新服务，停写老服务。



实践题
应用的闪退通常是什么原因造成的？如果应用闪退，Android 和 iOS 上是分别怎么抓取日志的？

一般闪退原因如下：

1.内存超载

2.后端服务或动态链接库未找到

3.应用初始化时无法正确读取到用户数据。

4.系统兼容问题。



日志抓取的话，iOS：



1.通过iTunes Connect（Manage Your Applications - View Details - Crash Reports）获取用户的crash日志

2.通过Xcode从你的设备上获得崩溃日志

3.自己在程序中添加崩溃捕捉代码，如果应用集成第三方SDK，如百度统计



Android：

1.通过集成第三方SDK，如百度统计、友盟统计等

2、发版时使用加固工具，他们也会收集错误日志，如360加固

3、在程序中添加程序异常崩溃的捕捉代码，保存到本地文件中

请简述移动应用在升级安装时候应该考虑的场景？



实际上跟CS架构的升级没什么两样：

1.APP有新版本时，打开APP是否有更新提示。

2.当版本为非强制升级版时，用户可以取消更新，老版本能正常使用。用户在下次启动app时，仍能出现更新提示。

3.当版本为强制升级版时，当给出强制更新后用户没有做更新时，退出APP。下次启动app时，仍出现强制升级提示。

4.不删除APP直接更新，检查是否能正常更新，更新后能否正常工作。

5.删除老的APP，重新下载APP，能不能正常工作。

6.不删除APP直接更新，检查更新后的APP和新安装的APP提供的功能一样。

7.检查在线跨版本升级能否成功，版本过老是否提示用户重装。

8.更新成功后，用户数据有没有丢失，各个配置项是否还原。



给你一个应用，请简述你会从哪些方面去测试？



一般答分类， 分类如下： 安装/卸载测试， UI， 功能， 性能， 安全， 兼容， 易用， 可移植性。切忌东答一下，西答一下。



请描述下微信朋友圈发小视频的用例设计？

先假设一个需求，征得面试官同意，在这个既定需求下说你的用例，还是那个思想，定性，定量分类， 不展开了，测试用例设计算基本功吧，考察的无非是功能的全面性，边界/异常条件下的处理， 性能/安全。 主要是有测试思维/结构化思维，设计的用例要系统，不能想起那个说那个。



如果让你来测试扫码支付，你会考虑哪些场景？

同上，不赘述



如何测试一个应用的登录场景？



同上，不赘述， 吐槽下，这题改成如何测试百度的登录会更好，BAT齐活了 ：） 实际上这3道题有一道就好了。

对中高级测试而言，实践题也是淘汰题，一项卡壳没有后续， 但如果在细节上有疏忽，可以网开一面，进入下个环节

5 服务端测试相关
什么都离不开服务端，所以这是你逃不开的，一般来说服务端会问接口测试，性能测试，更深一点，埋点监控止血也会有。

请问你们公司是如何做接口测试的？

1.接口规范

2.设计接口测试功能用例（主要从用户角度出发看接口能否实现业务需求，用例设计就是黑盒用例那一套）。

3.各种入参验证（正常情况，异常情况包括输入参数个数不对，类型不对，可选/必选， 还有考虑参数有互斥或关联的情况）。

4.接口返回值各种验证（符合接口文档需求）

5.了解接口实现逻辑，实现逻辑覆盖（语句/条件/分支/判定/。。。。。）

6.接口能并发执行吗，接口的串行，前后关系，是否判断状态

6.采用工具或者自写代码来验证，postman或者python代码

7.发现问题跟功能测试一样，该报bug报bug，该跟踪状态跟踪状态



接口测试质量评估标准是什么？

接口测试说的接口可以是模块接口，也可以是集成接口，那么质量评估标准也就转换为单元测试里的接口测试标准，和集成测试里的集成测试标准。



实际上这题如果我来回答的话会关注：

1.接口功能是否正确，接口功能是否实现了业务需求。

2.接口参数正确性包括实参形参的个数/属性，是否匹配。

3.接口并发/串行执行时接口返回值的正确性。

4.有没有性能问题（并发执行），有无安全问题（用户能否直接访问该接口，需不需要验证）


请问你们公司是如何做性能测试的？请讲诉性能测试的相关指标？

老规矩，先确定需求，再定性，定量。



例如：

1.这次测试目的是什么，是压力测试/负载测试/疲劳强度测试/BenchMark测试？

2.测试的硬件环境是什么？软件是什么？

3.测试工具用什么？

4.有哪些测试指标？

5.测试分析调优/测试报告要吗？



具体来说：

1.拿到测试需求，确定测试软硬件环境/测试指标， 使用测试工具(Loadrunner, jmeter)录制或者编写测试代码，逐步加压，直到测试目的达成。

2.分析测试结果，编写测试报告，突出性能指标包括成功，失败情况，并加以分析。

3.调优（一般都是开发的事）



相关性能指标：

服务器系统资源方面 CPU占用率，内存占用率 磁盘的读写指标

网络的占用情况 基础吞吐率

事务处理速度 如平均登录时间，操作平均响应时间等。

压力测试和负载测试的区别

一个（压力测试）把最后一根稻草仍你身上，一个（负载测试）就剩最后一根稻草没仍，或者仍给你指定数目稻草。

服务器中一般要监控哪些数据，如何监控的，怎么从监控数据中发现问题？

CPU， 内存， 网络， I/O， 数据库。等等。 一般用工具监控，另外Windows上有性能监视器。



发现问题，一般要关注阈值，比如CPU利用率超过85%，说明server压力太大了，数据量一大DB某条SQL写入速度变慢了等等等等



假设系统A调用系统B，我把B的接口都mock了，进行性能测试，这样有什么好处和坏处？

好处是去掉的依赖，可以在B没有好之前测试A，并且B的任何改动/错误/失效不会影响我测试A

坏处是真实性能要比测出来的性能差， 性能指标不准确。 因为Mock的服务再真也不能代替真实服务



有一天早上打车高峰，滴滴服务端挂了大概30分钟，工程师抢修之后，马上上线，之后又挂了，请问有哪些原因会造成这个情况？



还是考测试思维， 一定记得先确认需求，再定性，定量。 一般都要反问， 服务器是哪个服务器？后端应用服务器？数据服务器？缓存系统服务器？中间件服务器？文件系统服务器？
然后面试官说个，不说就自己假定一个， 然后第一次挂第二次挂分开说，先问有没有错误码，日志有吗，有就看日志，
没有的话：
应用服务器挂了，是不是高峰期顶不住这么大并发访问啊？
数据库服务器挂了，是不是频繁读写受不了啊，读写有分开吗？读写是走同步还是异步啊
缓存服务器：可能运行内存不足了，swap飘红了
中间件服务器:观察内存，cpu,可能nginx里连接过多，导致堵死；防火墙跟踪表的大小，优化对应的系统参数
文件系统服务器：还是看内存

第二次挂 需要确定第二次启动时线上代码，数据库等配置是否有更改，然后去查对应服务器的问题


6 自动化相关

理念和概念：
如何看待自动化和手动测试？怎样的一个比例才是健康的？

见仁见智，一切能提高软件质量的方法都应该尝试。

兵无常形，符合自己项目实际情况是最好的。当然你要面试自动化测试，肯定是一切稳定了的功能最好全部自动化掉


你们公司的自动化投入产出比怎样？效益怎样？

实话实说，UI自动化测试发现新bug的效益很低，主要用在回归测试上，减少测试工作量。接口测试可就不一样了，可以小步快跑，也可以集团作战。


自动化测试用例的覆盖率多少？

有个50%了不得了吧， 一般核心业务里的最高优先级用例100%覆盖，这些用例也是用来跑冒烟的。 另外的看项目资源了。

完整运行一次自动化用例需要多久时间？
Google说它们分钟级或者秒级别， 为毛我们都是小时级别


什么是分层自动化？

金字塔结构， 最底层UnitTest，往上接口API/集成起来的service， 最上面UI自动化

你的测试数据是怎么准备的？

写在脚本里/外部文件（excel， XML）/数据库， 逼格逐级提升



测试脚本的维护成本是怎么样的？

两个原则：

1.不坏就不要修

2.终身追责，谁污染谁治理



工具使用

WebDriver 相关

请问你的定位策略是什么？
ID， Clas， CSS， XPath， jquery脚本， 总之能不麻烦开发就不麻烦开发。

请问如何实现用例失败或者异常时候需要截图？
框架自带， python+webdriver里是get_screenshot_as_file， 一般写一个装饰器，放在要执行的类上，try， catch下。



请问如何分布式执行webdriver用例？
1、RemoteWebDriver


两种策略：

1.利用Jenkins等，部署部分代码到多个机器上执行

2.RemoteWebDriver



如何在脚本中执行 JavaScript 代码？

driver.execute_scripts(‘脚本’)



移动应用相关



Appium 的定位策略有哪些？

使用Appium-Python-Client情况下， 除了以下常规八种定位方式外：

driver.find_element_by_id() –元素的 resrouce-id 属性

driver.find_element_by_AccessibilityId() – content-desc属性，替代以前的name。

driver.find_element_by_xpath() –比css定位慢

driver.find_element_by_class_name() –元素的 class 属性

driver.find_element_by_css_selector()

driver.find_element_by_link_text() –链接元素的全部显示文字

driver.find_element_by_tag_name() –元素的标签名

driver.find_element_by_partial_link_text() –链接元素的部分显示文字



iOS和Android上还有独特的定位方法：



iOS：

IosUIAutomation –iOS9.3或以下的定位方法

driver.find_element_by_ios_uiautomation(‘.elements()[0]’)



Android：

AndroidUIAutomator， 仅支持 Android 4.2或以上，可支持元素的单个属性和多个属性定位。

driver.find_element_by_android_uiautomator(‘new UiSelector().text(“Animation”)’)



关于移动端元素的定位的定位，我公众号testertalk也发过系列文章，详细内容请移步。



请简述Appium的原理

真想跟面试官说，您能帮忙打开官网吗？Appium对iOS和Anroid的实现原理不尽相同，并且对同一个平台不同操作系统版本的实现原理也不相同。



我倾向大家往简单了说：

1.Appium是C/S架构的，更像是一个proxy，连接其被测移动平台和测试脚本。

2.appium是基于 webdriver 协议添加对移动设备自化api扩展而成的。



网上有个很清晰的图，截图如下：

实际上我个人理解，这个题就是想了解，当你使用一个工具时，你是否关心过它的内部实现，也可以过渡到当你测试一个应用时，你是否关注它的实现。

iOS 和 Android 的 UI 自动化的原理是什么？

上面已经答了，如下：

iOS 9.3 and above: Apple’s XCUITest

iOS 9.3 and lower: Apple’s UIAutomation

Android 4.2+: Google’s UiAutomator/UiAutomator2

Android 2.3+: Google’s Instrumentation. (Instrumentation support is provided by bundling a separate project, Selendroid)



当定位策略都失败的时候，你该怎么做？

80%是你元素定位的不对，那么多定位方法，一个不行换另外一个，直接不能定位，先定位父元素，再循环找子元素。一般来说XPATH都能定位到，无非是可阅读性不强。真的全部失效，请求开发帮你改个元素属性好了。



这题其实还是”测试sense”问题，扩大点变成了怎么解决工作中困难。反正别认怂， 最好甭废话，直接开干。



请问Monkey测试的优缺点？

没接触过，此题不会



如果使用monkey发现了一个毕现闪退，请问怎么使用monkey重现它？

同上



Jmeter



你用jmeter做什么测试？

接口，性能。






7 硬 题



所谓硬题就是答案一般都是固定或者标准的，答案也不会模棱两可，包括：算法，编程，sql，linux



算法：

请写出冒泡排序
1~9999数列中数字3出现的次数。用递推方法解出。


def bubble_sort(alist):
    count = 0
    for j in range(0,len(alist) - 1):#整个数列排序循环
        for i in range(0,len(alist) - 1 - j):
            # 元素从头走到尾，走完一次，排好一个数
            if alist[i] > alist[i + 1]:
                #因为要和下一个数相比，所以i只需要走到len(alist) - 1 - j
                alist[i],alist[i + 1] = alist[i + 1],alist[i]
            print(alist)
            count += 1
    print(count)
if __name__ == "__main__":
    li = [53,26,93,17,77,31,44,55,20,33,2,2,2,3,4,5555,6,6,6,66,67,67,76,77,3,34,34,23,232,3,3]
    print(li)
    bubble_sort(li)



本来以为很简单，写了一下，2位数能算出来结果，3位数会报递归次数太多， 觉得蹊跷， 仔细一查，尼玛这题大有来历，我跪的心服口服。经过查找资料，解答如下：

规律：

0~9：1

0~99：19=10*1+10-1

0~999：271=10*19+100-19

0~9999：3439=10*271+1000-271


f（1）=1

f(2)=9*f(1)+10 **1

f(3)=9*f(2)+10 **2


def digui(x):
    if x==1:
        count=1
    else:
        count=9*digui(x-1)+10**(x-1)
    return count

print(digui(1))
print(digui(2))
print(digui(3))




从一个数组中找出前4个最大的数，用最优解。



这个就是排序问题了吧，我想法先排好序，在取前4个，那么多排序，冒泡啊，选择啊，快排啊。。这里面快排最快，用大O算法O (n * log n )。
冒泡排序：
def bubble_sort(nums):

    for i in range(len(nums) - 1):  # 这个循环负责设置冒泡排序进行的次数（比如说n个数，则只要进行n-1次冒泡，就可以把这个n个数排序好，对吧）
        for j in range(len(nums) - i - 1):
"""
这里这个j呢就是控制每一次具体的冒泡过程，请你想一想，我们第一次冒泡需要冒几次，也就是说需要比较几次，
假如有三个数，那只需要两次就可以了，当下一次时，最后一个
已经是有序的了，所以说少冒泡一次，所以这里j每次都会减去i的值，即不用冒“无用之泡泡”
"""
            if nums[j] > nums[j + 1]:
                nums[j], nums[j + 1] = nums[j + 1], nums[j]

    return nums

优化冒泡排序：
def bubble_sort(nums):

    for i in range(len(nums) - 1):
        ex_flag = False  # 改进后的冒泡，设置一个交换标志位
        for j in range(len(nums) - i - 1):

            if nums[j] > nums[j + 1]:
                nums[j], nums[j + 1] = nums[j + 1], nums[j]
                ex_flag = True
        if not ex_flag:
            return nums  # 这里代表计算机偷懒成功 (〃'▽'〃)

    return nums  #

思想：

少于2个元素的数组不需要排序

找一个元素作为基数

小于基数的放一个数组

大于基数的放一个数组

针对小于基数的数组做快速排序，暂且叫low

针对大于基数的数组做快速排序, 暂且叫high

最终排序后的 low + 【基数】+ high，就是排好序的数组






其实python里内置了很多优秀的方法来解决其他语言很繁琐的问题，比如本题目可以直接：

print(sorted([2,2,1,8,5,7,6])[:4])

（据说python里sorted实现也是快排，没有经过求证。）

哈哈，这样，面试官会不会鄙视我 ：）



我之前也分享过基本的算法，大家可以去我的公众号testertalk查看。

写一段程序，删除字符串a中包含的字符串b，举例 输入a = “asdw”,b = “sd” 返回 字符串 “aw”，并且测试这个程序。








编程：



什么是面向对象编程？

把一切看成对象，三大特性 继承，封装，多态

讲下Java多线程的使用

java多线程跟别的语言的多线程有区别吗？



多线程一般用来更好的利用CPU资源，解决诸如程序“在一部分上会阻塞”，“在另一部分上需要持续运行”的场合。多线程一般用来更好的利用CPU资源，解决诸如程序“在一部分上会阻塞”，“在另一部分上需要持续运行”的场合。



例如有个程序需要接受多个用户输入并向服务器发送数据，那么如果不用多线程，一旦程序在等待某个用户输入时，程序就会阻塞。这段时间其它用户也不能使用了

有三个线程T1，T2，T3，怎么确保它们按顺序执行？

在主线程中，每一个线程start（）后立即join（）

Thread 类中的start() 和 run() 方法有什么区别？

　　当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动；

　　start()方法才会启动新的线程

SQL：

说下左连接和右连接


介绍下什么是索引


使用sql生产10万条数据

平常没接触过这么大数据量，分批次吧，每次插入1w条，应该没什么压力

给你一张表，根据要求写sql，这个题目比较多，自己百度吧。


查看服务器线程及端口命令



你常用的命令是什么？

ls, mkdir, cat, vi, ps touch

用什么查看log？

watch, tail、cat、tac、head、echo

如何查找一个文件大小超过5M的文件


性能测试：

swap 飘黄
CPU 使用率  80%
I/0 响应时间 10ms



性能测试针对系统的性能指标，建立性能测试模型，制定性能测试方案，制定监控策略，在场景条件之下执行性能场景，分析判断性能瓶颈并调优，最终得出性能结果来评估系统的性能指标是否满足既定值。



在上面这张示意图中，其实压力工具是 4 个并发线程，由于每个线程都可以在一秒内完成 4 个事务，所以总的 TPS 是 16。这非常容易理解吧。而在大部分非技术人的脑子里，这样的场景就是并发数是 4，而不是 16。

> 1.txt

1、功能：
点：输入框：输入类型   ----查看返回提示
            输入长度   ----查看返回提示
			输入后删除功能---输入后删除提交保存功能----查看提交返回结果是否与输入保持一致
			输入后删除再输入功能
			输入后修改
			返回上一级功能
			如果该物品是一个商品，考虑商品状态变更问题，包括价格及库存
			商品链接跳转问题
			商品数量问题及商品购买规则，如多少包邮，多少满减等，这个就比较复杂了，要跟很多活动一起测试
			删除该商品功能，购物车不买了
			再次从商品链接添加该商品至购物车，看商品数量是否增加，及这个时候如果商品限购，那么要考虑商品数量问题
			再次从商品链接添加该商品至购物车--增删改查看一下--提交看一下，数据库进行数据比对
			商品购买时间及库存问题，需要满足他的购买规则
			商品如果限购，应该从服务器接口进行限制，这个时候就要考虑分多次购买进行测试
			从性能方面需要看一下并发量大时，购买规则是否受影响
			从接口方面也要测试以上条件
2、兼容性：ui兼容，版本兼容，操作系统兼容

引入日志 2,函数执行时间统计 3,执行函数前预备处理 4,执行函数后清理功能 5,权限校验等场景 6,缓存 7,事务处理